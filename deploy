#!/bin/bash
set -e
rlz="$1"
shift
[ -f "${rlz}" ]
[ -f "${rlz}.sha256" ]
doclean=0
dostart=1
while [ -n "$1" ]; do
    case "$1" in
        clean)
            doclean=1
            ;;
        nostart)
            dostart=0
            ;;
        *)
            echo "Unrecognized argument $1" >&2
            exit 1
            ;;
    esac
    shift
done
echo "deploy $rlz"
(cd "$(dirname "$rlz")" && sha256sum -c "${rlz}.sha256")
tmp=$(mktemp -d)
trap "rm -rf $tmp 2>/dev/null" EXIT INT TERM
tar -xvf "$rlz" -C $tmp
[ -f $tmp/metadata ] && [ -f $tmp/context/docker-compose.yml ] && [ -d $tmp/images ]
. $tmp/metadata
. /etc/compose-dirs.conf
[ -n "$app" ]
echo "$app" | grep -q '[-_a-zA-Z0-9]'
[ -n "$target_env" ]
echo "$target_env" | grep -q -E '(dev|integ|recette|prod)'
if [ $(ls $tmp/images/*.tar.gz 2>/dev/null|wc -l) -gt 0 ]; then
  for image in $tmp/images/*.tar.gz; do
    zcat $image | docker image load
    rm $image
  done
  docker image prune -f || true
fi
cd "$compose_dir"
if [ $doclean -eq 1 ] && [ -d $app/$target_env ]; then
    (cd $app/$target_env && docker-compose down -v)
fi
mkdir -p $app/$target_env
mv $tmp/context/docker-compose.yml $app/$target_env/.orig.yml
cp $tmp/context/* $app/$target_env/ 2>/dev/null || true
cd $app/$target_env/
echo "COMPOSE_PROJECT_NAME=${app}-${target_env}" > .env
cat > .proxy.yml <<EOF
version: '2.4'
networks:
  "proxy":
    external:
      name: "proxy_network"
services:
EOF
domain=$(sed -r -n '/DEFAULT_HOST/s/.*=(.*)"/\1/p' ${compose_dir}/proxy/docker-compose.yml)
[ "$target_env" = "prod" ] && suffix=.${domain} || suffix=-${target_env}.${domain}
for svc in $(docker-compose -f .orig.yml config --services); do
  vhost_var=${svc}_base_vhost
  vhost=${!vhost_var}
  port_var=${svc}_vhost_port
  port=${!port_var:-80}
  if [ -n "$vhost" ]; then
    cat >> .proxy.yml <<EOF
  $svc:
    environment:
      - "VIRTUAL_HOST=${vhost}${suffix}"
      - "LETSENCRYPT_HOST=${vhost}${suffix}"
      - "VIRTUAL_PORT=${port}"
    networks:
      - "proxy"
EOF
  fi
done
docker-compose -f .orig.yml -f .proxy.yml config > docker-compose.yml
sed -i "s|$PWD|.|g" docker-compose.yml
cd "$compose_dir"
grep -q "^${app}/${target_env}:" $deps_file && sed -r -i "/^${app}\/${target_env}:/d" $deps_file
echo "${app}/${target_env}:proxy" >> $deps_file
sudo compose-dirs update
if [ "$dostart" = "1" ]; then
  sudo systemctl restart compose@$(systemd-escape --suffix service "${app}/${target_env}")
elif systemctl is-active compose@$(systemd-escape --suffix service "${app}/${target_env}") > /dev/null; then
  sudo systemctl stop compose@$(systemd-escape --suffix service "${app}/${target_env}")
fi
